"""clean init

Revision ID: ea231f718578
Revises: 
Create Date: 2025-06-19 16:17:08.317127

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ea231f718578'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS timescaledb;")
    op.create_table('monitor',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('monitor_name', sa.Text(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('install_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('w3w', sa.Text(), nullable=True),
    sa.Column('area', sa.Text(), nullable=True),
    sa.Column('location', sa.Text(), nullable=True),
    sa.Column('mh_reference', sa.Text(), nullable=True),
    sa.Column('pipe', sa.Text(), nullable=True),
    sa.Column('height_mm', sa.Integer(), nullable=True),
    sa.Column('width_mm', sa.Integer(), nullable=True),
    sa.Column('shape', sa.Text(), nullable=True),
    sa.Column('depth_mm', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('monitor_id')
    )
    op.create_table('action_responsibility',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('requester', sa.Text(), nullable=True),
    sa.Column('removal_checker', sa.Text(), nullable=True),
    sa.Column('removal_reviewer', sa.Text(), nullable=True),
    sa.Column('removal_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('action_type', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.monitor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dry_day_event',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('dry_day_number', sa.Integer(), nullable=True),
    sa.Column('event_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('event_comment', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.monitor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measurement',
    sa.Column('time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('depth', sa.Numeric(), nullable=True),
    sa.Column('flow', sa.Numeric(), nullable=True),
    sa.Column('quality_flags', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
    sa.PrimaryKeyConstraint('time', 'monitor_id')
    )
    op.create_table('presite_install_check',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('mh_reference', sa.Text(), nullable=True),
    sa.Column('pipe', sa.Text(), nullable=True),
    sa.Column('position', sa.Text(), nullable=True),
    sa.Column('correct_location', sa.Boolean(), nullable=True),
    sa.Column('correct_install_pipe', sa.Boolean(), nullable=True),
    sa.Column('correct_pipe_size', sa.Boolean(), nullable=True),
    sa.Column('correct_pipe_shape', sa.Boolean(), nullable=True),
    sa.Column('comments', sa.JSON(), nullable=True),
    sa.Column('checked_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.monitor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storm_event',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('storm_type', sa.String(), nullable=False),
    sa.Column('event_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('event_comment', sa.JSON(), nullable=True),
    sa.Column('coverage', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.monitor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('weekly_quality_check',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('monitor_id', sa.Integer(), nullable=True),
    sa.Column('silt_mm', sa.Integer(), nullable=True),
    sa.Column('comments', sa.JSON(), nullable=True),
    sa.Column('actions', sa.JSON(), nullable=True),
    sa.Column('interim', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['monitor_id'], ['monitor.monitor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    #  Convert measurement table into TimescaleDB hypertable
    op.execute("""
	SELECT create_hypertable('measurement', 'time', if_not_exists => TRUE);
       """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('weekly_quality_check')
    op.drop_table('storm_event')
    op.drop_table('presite_install_check')
    op.drop_table('measurement')
    op.drop_table('dry_day_event')
    op.drop_table('action_responsibility')
    op.drop_table('monitor')
    # ### end Alembic commands ###
