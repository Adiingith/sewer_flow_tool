"""modify measurement and add rain_gauge

Revision ID: 65b2ac3ad960
Revises: 255ee2720990
Create Date: 2025-07-06 17:26:32.627272

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '65b2ac3ad960'
down_revision: Union[str, None] = '255ee2720990'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('measurement_pkey', 'measurement', type_='primary')
    op.create_primary_key('measurement_pkey', 'measurement', ['time', 'monitor_id', 'interim'])

    # 2. create rain_gauge table
    op.create_table('rain_gauge',
        sa.Column('monitor_id', sa.Integer(), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('intensity_mm_per_hr', sa.Float(), nullable=True),
        sa.Column('interim', sa.String(length=20), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['monitor_id'], ['monitor.id'], ),
        sa.PrimaryKeyConstraint('timestamp', 'monitor_id', 'interim')
    )
    # 3. convert rain_gauge table to TimescaleDB super table
    op.execute("SELECT create_hypertable('rain_gauge', 'timestamp', if_not_exists => TRUE);")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. drop rain_gauge table
    op.drop_table('rain_gauge')
    # 2. restore measurement table primary key to two fields
    op.drop_constraint('measurement_pkey', 'measurement', type_='primary')
    op.create_primary_key('measurement_pkey', 'measurement', ['time', 'monitor_id'])
    # ### end Alembic commands ###
